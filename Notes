+++++ React : Js libary for user interface 
=================================================================================================================================
SETUP 
- command Terminal : pwd  ls  mkdir  cd  cd ..  clear
- package.json     => dependancies required for the running React application run correctly .
- install dependecis => npm install ( package.json all dependance (pakages))
- npm  => (node pakage manger) for  js and node.js application required 
- anything installed in using npm Their dependencies is created in pakage-j.son
- npm install <pakage name>  option 
   options :  
- to run project dependance requird to install in that repository . 
- global install => any repo use able     -g at end 
=================================================================================================================================
+++++ SETUP tools   ( create react app ) 
- Create React APP : all depencies install in one shoot
                     command line tool for quickly set up new react project 
                     creates an environment where easily buil and see website for react 
     syntax        : npx create-react-app <folderName>     (where to install dependances )
- Babel            :  javascript comiler  |  latest js syntax and feature works without worring about browser compatibility . 
*- Run React project : 
   step 1 -> go to parent repos of project repository   
          npx create-react-app <folderName_project>
   step 2 -> go inside the project repository 
          npm start 
   step 3 -> react app will be creastd on localhost:3000 
- Structure of files : 
   - nodemodules folder : installed dependecs 
   - public   folder    : folder contains static assets and the HTML template used as the base for your React application.
         index.html : where  js code is running . [ react component engict in 
   - build  folder      :  It contains the production-ready version of your React application
      npm run build  commoand run
    *- src folder : 
           app.js     =>  where all react commonent are making . 
           index.js   => js component is making and enjecting in index.html of puclic  
   - pakage-json   : contains all dependance used to run react application .
=================================================================================================================================
+++++ Creating component : 
 - index.js in src folder : 
       1) import React from 'react'                    
       2) import ReactDom from 'react-dom'    ( required to inject react component into html pages index.html in public) 
       3) create compnent -> function with firt latter is capital 
       4) inject in index.html :   
            ReactDom.render( what component , where to inject ) 
            ReactDom.render( <FunctionName/> , document.getElementById('root') );
 - returning component : 
     1way : html code     e.g return <h4> hellow world </h4>     
     2way : React.createElement('tagName',{},'continant');  e.g React.createElement('h4',{} , 'hellow world');
     3way :  return  (  HTML element ) ;    angular brakets 
     return single element only : 
           if 2 element then :  1) put into <React.fragment> </React.fragment>  2) put into <div> </div>  semantics  maintian <article></article>  
           
=================================================================================================================================
+++++ JSX rules : javaScript XML compoennts are writeen in this syntax 
- JSX : return HTML element   karto tyatla  HTML element means JSX . 
- return single element always    if more => div put ,  <React.Fragment> </React.Fragment> 
- semantic use  :  nested in meaningful 
- use camelCase for Html attribute   e.g  onclick   is  Used as  onClick 
- <div class ="">     use   <div className = "" >    ( attribute are different )  
- close every element   : single elemtn in html  <img>    react => <img src =""   /> 
- formating  : use  return ();  
=================================================================================================================================
+++++ Nesting componets : 
- component                   : function with first latter upper 
- store component in varialbe : const  compName = () => {   return (); }
- we can add stored component in HTML element .
- MUST USE <compoenetName/>  clossing after name 
-   <div>
        <compoennt1/> 
        <component2/>
    </div> 

=================================================================================================================================
+++++ how to design the Using CSS file 
- import css in index.js :  import './index.css' ( location provide where iis it css file )
- className =""       give to Returning HTML element of component . 
- select and Desing
Disadvantage :  name collision possible 
solution     : JS Css 

++++ Desing the Component Inline in index.js : 
function Component()
{
      <section  style = {{ attribute : 'value' , color : 'red' , margin : '30px'}}
      >
      </section> 
}
Value writing JSX rule follow Captlizing :  fontsize   insted of do this  fontSize 
=================================================================================================================================
+++++ Component Use : 
as many as use . 
modify all by just modifying the component . ( replicate every other ) 

=================================================================================================================================
+++ Amazon best seelling book : 
banvla . 

=============================================================================================
+++++ JS inside JSX  (i.e return HTML element) 
- to include js :   { expression }   // expression that return some vairiable    {title} or {title.UpperCase()} or {4+5} 
       e.g <h1> {title.uppercase()} </h1> 
- Global varible usable in all JSX use : 
    <h1> {var} </h1> 
- object passing to Component ( function with parameter and 1st latter capital ) 
   defining component :   const cmpName  = (props ) => { return (use props object prperties);} 
   nested use of compoent  :    < cmpName  para1=value1 para2=value2> 
   Object props contian  2 entired  para1 = value1   and para2 = value2 
 
 -another way to define :  const cmpName = ({para1,para2}) { }
                     already unpaked data is taken  
             e.g : const  Book = ({img,title,author})=>{
                       return (
                         <section className ="book">
                           <img src={img}></img>
                           <h1>{ title}</h1>
                           <h4 style={{color:'#617d98',fontSize :'0.75rem',marginTop:'0.25rem'}}> {author} </h4>
                         </section> 

                       );
                     }
- parameter whose are passed at time of use of component that only have values assinged on train .

=============================================================================================
+++++ Calling component as nestedcomponent  : 
< book  para1 = value1  para2 =value2  para5 = value5  />
========================================================= ====================================
+++++ Children of compoenent 
children     :   <Book  para1 = val1  para3 = val3> <p> <p> </Book> 
               here p is children because p is inside the coponent
               that is passed in object pros as children 
use component 
              then we can place children anywhere using JS 
              css that component apply easily
              book p { css desing } 
At component :  const Book = (pros) => { 
                 return (  {pros.children;});
                } 
=============================================================================================
+++++ Display array using component : 
- directly accing array in component  if string then print entire array  
         if object   cannot be render and erorr 
- newComponent  function mapping use karne  by passing array 
  newComponent = arrayName.map( (name) => {  return <h1> name <h1>  });  names display one by one .
- function mapping is used 
- other copmonet add this newComponent .  
=============================================================================================
+++++ Passing array to component : 
aim : Booklist  component that contain  n books 
we done : boolist comonent { Booksubcomponent form }
array objects booksubmocont display  then properties passed 

const Booklist = () =>{
  return (  arrayName.map( (book)=> {  return ( <Book book = {book} />)}      ); 
}


passing object to component : 
< Book  book = {book} />    book is object passsed 
const Book = (props) => 
{
    { author , title ,img } = props.book   ( unpaking )  
}


passing object to compoent by sreding : 
< Book  {...book} />     ( book is object that contina author ,title,img ) 

passing object to compoent by sreding : 
< Book  key = id  {...book} />     ( book is object that contina author ,title,img ) 

GIve unique id to each object to track which one deleted and added . 


=============================================================================================
+++++



=============================================================================================
+++++



=============================================================================================
+++++



