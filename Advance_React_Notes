++++++ topics : 
useState , useEffect ,Conditional Rendering , Forms , useRef , useReducer , Prop Drilling , Context API / useCOntext 

IMPORTNT : useState and useEffect 
Renderingv : en·​der ˈren-dər. : to transmit to another : deliver. : to furnish for consideration, approval, o

==========================================================================================p
problem faced during setup : 
1) C:digital envelope routines::unsupported   this error came 
 solved : 
    reinstalled depencdecies 
    Updatae dependencies to fix it : npm audit fix
===============================================================================================
+++++ different requirement are provided in 12 tutorial basic sethup 
we have want to more focus on Functionality 
===============================================================================================
+++++ index.js component rount into root div of public index.html file
index.js  inside  : app.js  app copmonent is redered  

we are writing in app.js . 
===============================================================================================
+++++ how to work : 
1) to see which component is learning and final component both are provided 
   app.js : import working component  setup and final componetn
             add into JSX ( html returning )
2) go to setup copment try  learning . 
===============================================================================================
#############################################################################################################################################
+++++ UseState Learning : 

- Render :  refers to the process of generating and displaying the user interface (UI) based on the 
  current state and props of a component.
  It involves translating JSX code into HTML elements, creating DOM nodes, applying styles, and attaching event listeners. 
  The rendered output is what the user sees and interacts with on the page
  
- Re-renders : 
  Re-renders occur when a component evaluates its JSX code again to generate a new output.
  It results in the generation of updated UI based on changes in state or prop values.
  The component re-evaluates its JSX code, potentially updating the values of variables.
  Styles may be recalculated to reflect any changes in the component's state or prop values.
  The updated UI is displayed to the user, reflecting the changes made in the component.

- The useState hook in React is used to add state management to functional components
  It allows you to declare state variables, update them, and trigger component  re-renders when the state changes. 
  It's a powerful tool for managing dynamic data and building interactive UIs in React.

- useState is function which takes 2 values 
    valu1 -> variable  var1 
    value2 -> setVariable funcitonName  by which we want to change the value of var1 
Rules to use : 
 1) use 
 2) component name must be uppercase 
 3) must be in function/coponent body 
 4) cannot call conditionaly . 

1) 1-errorExample : 
     direct change ( assingment of new values by function ) 
     variable values are changes but change is not seen on Web page 
     To fix it usestate is used . 
2)  How to do ; 
    step1 -> import { useState } from 'react'
    step2 -> array destructor 
    [ variableName , FuncitonName] = useState(initialValue of variable )
    step3 -> whenere requried to update the value 
    FunctionName(newValue) ;   
    it will update 
 3) useState of Array : 
    delete element from array click remove btn 
    one compoent having printing all names in people array make  
    (inside componente return JSX madhey  arrray.map( ele =>{ write funtion that create copmoent of one array elemlement } );
    before return add function removeelement 
    
    create usestate of peopel variable and setPeople funciton 
    when remove elemnt : new array from filter 
    update new array useing setPeople 
    
    button for all array element 
  4) useState for object update :
     object create inside component 
     *** Note : event calling always use  { () => functionName() }
     updata time objact spread first required 
     obj = { p1 : v1 , p2 : v2 } 
     update p2 
     const [obj,setObj = useState( { p1 : v1 , p2 : v2 } ) ; 
     setObj(...obj,p2 : v3 ) 
  5) useState for numric value : 
     varial creatt 
     compoent madhey update variable 
     
     $$$$$$$$$ IMP : 
     Complex update : any updation using useState function 
     timeout set used for value updation then pass direct value is give not desired output 
     3 click than 1 number is updated 
     because 3 times calling paramter is take old value 
     e.g // setTimeout(()=>{setComplexvalue(complexvalue+1);}, 2000);
     Solution : use function passs inside the setvalue function 
      setTimeout(   
    ()=>{ setComplexvalue( (complexvalue) => { return (complexvalue+1);})}
    , 2000)
     }
     here previously updated value is taken so updation correclty 
     we any string ,array , ojbect timeout updation is same above. 
     
     
     
 
 
===============================================================================================
+++++ UseEffect : 
- used peform sideeffect in functional component 
- sideeffect => data fetching , subscription , manually changin DOM . 
1)  Deafault runder : 
   syntax : call useEffect( function ) ;   inside the componenet  
   function will executed every time when redering the component in which it present.  
- redering => updating the visual output of application . (generating HTML , CSS ,js code ) 
- usestate value changes then re-redering occured  
- Note : we cann't write useeffect inside the condition block . 
   
   syntax : call  useEffect(function,[var1,var2]);
   after evertime redering of any of dpendancy variable  function is executed 
   2nd parmenter => list of dependancy useState variable 
Note : we can call useefect as many time we want . 

2) cleaup function in useEffect : 
  why used : 
  - TO prevent memory leaks, avoid conflicts or unintended behavior, 
  - memory leaks : every time eventlistner creted it allocate memory for storing the function 
                 (RAM is allocated if we don't clean then RAM used increase ) 
                 clean => optimizing memory usages (RAM ) 
  - the cleanup function is used in useEffect to perform necessary cleanup operations
  ***- not clearned then  lots of eventlistner is created . memory consumtion increase 
  what it will do : 
    - performing necessary cleanup operations before the effect is re-run 
  inside the useEffect we add the eventlistner then  
  in return function must to remove the eventlistner . 
  becuase nextime rendering then at that time eventlistner is added . 
  
  *** Syntax :   useEffect(function)  or useEffect(function) 
   inside the function :  {  return () => { remove the eventlistner }}
  e.g window size changes then we add event listner using  

3) Fetching data : whenever useStatFunction() callling inside the useEffect(fucntion,[]) fucntion 
     make sure 2nd paramenter = []  empty dependcy to avoid infinte loop 
     useffect -> setUser -> useefect -> setUser->.........
   
 **** Fetching the data : 
     asynchonous function used : function what will run bacgroundly 
       const getUser  = async ()=>
  {
      const responce = await fetch(url)   /// fetch will send GET requrest to specidfie Url and return promise that resolves to servers response 
      // await will pause the execution   // fetch method used so steram of data ( raw data ) is received 
      const users = await responce.json(); // parse resopone to json   ( raw data -> js object making) 
      setUsers(users); 
      console.log(users);     
  }
==================================================================================================
Conditional Redering : 
- based on condition  displying selective content    
  coponent will disply what JSX  is returned     so use condition for returing component 
  synta : 
  const componName = () => { 
     [var,setVar] = useState(0)
     if(var ) 
      return <h2> loading </h2>
     else : 
      return <h2> multiple User </h2> 
      
  }
2) short Circuit : ||   &&  how will world 
    part1 &&  part2  : if part1 is true then only part2 will executed     used for conditional rendering 
    part1 || part2   : if part1 is true then 2nd part will not executed   used for provide default values . 
3) show and hide : 
   show vaiable maintain 
   {show && <h3> this is ojbect  </h3>}
    show true then 2nd part run and disply this is object . 
